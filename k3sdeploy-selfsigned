---
# Playbook: Deploy K3s cluster with Rancher

- name: Set global variables
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Set facts for cluster
      set_fact:
        primary_master: "{{ groups['masters'][0] }}"
        rancher_hostname: "rancher.{{ hostvars[groups['masters'][0]].ansible_host }}.lan"
        bootstrap_password: "SecurePassword123!"
        cluster_token: "{{ hostvars[groups['masters'][0]].k3s_token | default('') }}"

- name: Prepare all nodes
  hosts: all
  become: yes
  tasks:
    - name: Update apt cache with retries
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      register: apt_update
      until: apt_update is succeeded
      retries: 5
      delay: 10

- name: Configure master nodes
  hosts: masters
  become: yes
  serial: 1
  vars:
    is_primary: "{{ inventory_hostname == groups['masters'][0] }}"
  tasks:
    - name: Install primary K3s master (with embedded etcd)
      when: is_primary
      ansible.builtin.shell: |
        curl -sfL https://get.k3s.io | sh -s - server \
          --cluster-init \
          --disable traefik \
          --tls-san {{ hostvars['localhost'].rancher_hostname }} \
          --tls-san {{ ansible_host }}
      register: k3s_install
      changed_when: k3s_install.rc == 0

    - name: Wait for cluster initialization
      when: is_primary
      ansible.builtin.wait_for:
        path: /var/lib/rancher/k3s/server/node-token
        timeout: 180

    - name: Retrieve cluster token from primary
      when: is_primary
      ansible.builtin.slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: token_file

    - name: Set cluster token fact
      when: is_primary
      set_fact:
        k3s_token: "{{ token_file.content | b64decode | trim }}"

    - name: Join secondary masters to cluster
      when: not is_primary
      ansible.builtin.shell: |
        curl -sfL https://get.k3s.io | sh -s - server \
          --server https://{{ hostvars[groups['masters'][0]].ansible_host }}:6443 \
          --token {{ hostvars[groups['masters'][0]].k3s_token }} \
          --tls-san {{ hostvars['localhost'].rancher_hostname }} \
          --tls-san {{ ansible_host }}
      register: join_result
      changed_when: "'already installed' not in join_result.stdout"

    - name: Verify K3s service
      ansible.builtin.systemd:
        name: k3s
        state: started
      register: service_status
      until: service_status is succeeded
      retries: 5
      delay: 10

- name: Join worker nodes
  hosts: workers
  become: yes
  tasks:
    - name: Join worker to cluster
      ansible.builtin.shell: |
        curl -sfL https://get.k3s.io | sh -s - agent \
          --server https://{{ hostvars[groups['masters'][0]].ansible_host }}:6443 \
          --token {{ hostvars[groups['masters'][0]].k3s_token }}
      register: join_worker
      changed_when: "'already installed' not in join_worker.stdout"

- name: Deploy Rancher with self-signed certs
  hosts: "{{ groups['masters'][0] }}"
  become: yes
  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name: 
          - helm
          - openssl
        state: present

    - name: Configure kubeconfig access
      ansible.builtin.file:
        path: /etc/rancher/k3s/k3s.yaml
        owner: root
        group: root
        mode: '0644'

    - name: Generate self-signed certificate
      ansible.builtin.shell: |
        mkdir -p /tmp/rancher-certs
        openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes \
          -keyout /tmp/rancher-certs/tls.key \
          -out /tmp/rancher-certs/tls.crt \
          -subj "/CN={{ hostvars['localhost'].rancher_hostname }}" \
          -addext "subjectAltName=DNS:{{ hostvars['localhost'].rancher_hostname }},IP:{{ ansible_host }}"
      args:
        creates: /tmp/rancher-certs/tls.crt

    - name: Create TLS secret
      ansible.builtin.shell: |
        kubectl create namespace cattle-system --dry-run=client -o yaml | kubectl apply -f -
        kubectl -n cattle-system create secret tls tls-rancher-ingress \
          --cert=/tmp/rancher-certs/tls.crt \
          --key=/tmp/rancher-certs/tls.key \
          --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    - name: Add Rancher Helm repository
      ansible.builtin.shell: |
        helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
        helm repo update

    - name: Deploy Rancher
      ansible.builtin.shell: |
        helm upgrade --install rancher rancher-latest/rancher \
          --namespace cattle-system \
          --create-namespace \
          --set hostname={{ hostvars['localhost'].rancher_hostname }} \
          --set bootstrapPassword={{ hostvars['localhost'].bootstrap_password }} \
          --set ingress.tls.source=secret \
          --set replicaCount=2
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      register: helm_deploy
      retries: 3
      delay: 30
      until: helm_deploy.rc == 0

    - name: Verify Rancher pods
      ansible.builtin.shell: |
        kubectl -n cattle-system rollout status deployment/rancher
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      register: rancher_status
      until: rancher_status.rc == 0
      retries: 12
      delay: 15

    - name: Display access information
      ansible.builtin.debug:
        msg: |
          Rancher successfully deployed!
          URL: https://{{ hostvars['localhost'].rancher_hostname }}
          Bootstrap Password: {{ hostvars['localhost'].bootstrap_password }}
          Add to hosts file: {{ hostvars[groups['masters'][0]].ansible_host }} {{ hostvars['localhost'].rancher_hostname }}