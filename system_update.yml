---
- name: Update and upgrade system packages
  hosts: all  # Replace with your target group or 'all' for all hosts
  become: yes  # Privilege escalation required for package management
  gather_facts: yes  # Required to determine OS distribution

  tasks:
    # Debian/Ubuntu: Update and upgrade with apt
    - name: Update apt package cache (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600  # Cache valid for 1 hour to reduce redundant updates
      when: ansible_os_family == "Debian"  # Use os_family for broader compatibility

    - name: Upgrade all apt packages (Debian/Ubuntu)
      ansible.builtin.apt:
        upgrade: dist  # Full system upgrade
        autoremove: yes
        autoclean: yes
      when: ansible_os_family == "Debian"

    # CentOS/RHEL/Fedora: Update with dnf (modern RHEL-based systems)
    - name: Update dnf packages (Fedora/CentOS/RHEL with dnf)
      ansible.builtin.dnf:
        name: '*'
        state: latest
        update_cache: yes
      when: >
        (ansible_distribution == "Fedora" or 
         ansible_distribution == "CentOS" or 
         ansible_distribution == "RedHat") and
        ansible_pkg_mgr == "dnf"

    - name: Clean up dnf packages (Fedora/CentOS/RHEL with dnf)
      ansible.builtin.dnf:
        autoremove: yes
      when: >
        (ansible_distribution == "Fedora" or 
         ansible_distribution == "CentOS" or 
         ansible_distribution == "RedHat") and
        ansible_pkg_mgr == "dnf"

    # Amazon Linux 2 / Older CentOS/RHEL: Update with yum
    - name: Update yum packages (Amazon Linux 2, older CentOS/RHEL)
      ansible.builtin.yum:
        name: '*'
        state: latest
        update_cache: yes
      when: >
        ansible_distribution == "Amazon" or
        (ansible_distribution in ["CentOS", "RedHat"] and ansible_pkg_mgr == "yum")

    - name: Clean up yum packages (Amazon Linux 2, older CentOS/RHEL)
      ansible.builtin.yum:
        clean_requirements_on_remove: yes  # Similar to autoremove
      when: >
        ansible_distribution == "Amazon" or
        (ansible_distribution in ["CentOS", "RedHat"] and ansible_pkg_mgr == "yum")

    # Optional: Check for reboot requirement (multi-distro)
    - name: Check if reboot is required (Debian/Ubuntu)
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_debian
      when: ansible_os_family == "Debian"
      ignore_errors: yes  # Avoid playbook failure if file check fails

    - name: Check if reboot is required (RHEL-based, including Amazon Linux)
      ansible.builtin.command: needs-restarting -r
      register: reboot_required_rhel
      failed_when: false  # Command returns non-zero if reboot needed, not a failure
      changed_when: false
      when: ansible_os_family == "RedHat"  # Covers Amazon Linux, CentOS, RHEL

    # Reboot if required
    - name: Reboot system if required
      ansible.builtin.reboot:
        msg: "Rebooting after system updates"
        reboot_timeout: 300  # 5 minutes timeout
      when: >
        (ansible_os_family == "Debian" and reboot_required_debian.stat.exists) or
        (ansible_os_family == "RedHat" and reboot_required_rhel.rc == 1)